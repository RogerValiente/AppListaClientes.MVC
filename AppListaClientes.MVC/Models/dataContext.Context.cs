//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppListaClientes.MVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbPruebaEntities : DbContext
    {
        public dbPruebaEntities()
            : base("name=dbPruebaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblCiudades> tblCiudades { get; set; }
        public virtual DbSet<tblClientes> tblClientes { get; set; }
        public virtual DbSet<tblDepartamentos> tblDepartamentos { get; set; }
    
        public virtual int usp_Clientes_Actualizar(Nullable<int> iDCliente, string nitCliente, string primerNombre, string segundoNombre, string primerApellido, string segundoApellido, string telefono, string direccion, Nullable<int> iDCiudad, string correo, Nullable<System.DateTime> fechaCreacion, string usuario)
        {
            var iDClienteParameter = iDCliente.HasValue ?
                new ObjectParameter("IDCliente", iDCliente) :
                new ObjectParameter("IDCliente", typeof(int));
    
            var nitClienteParameter = nitCliente != null ?
                new ObjectParameter("NitCliente", nitCliente) :
                new ObjectParameter("NitCliente", typeof(string));
    
            var primerNombreParameter = primerNombre != null ?
                new ObjectParameter("PrimerNombre", primerNombre) :
                new ObjectParameter("PrimerNombre", typeof(string));
    
            var segundoNombreParameter = segundoNombre != null ?
                new ObjectParameter("SegundoNombre", segundoNombre) :
                new ObjectParameter("SegundoNombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("PrimerApellido", primerApellido) :
                new ObjectParameter("PrimerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("SegundoApellido", segundoApellido) :
                new ObjectParameter("SegundoApellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var iDCiudadParameter = iDCiudad.HasValue ?
                new ObjectParameter("IDCiudad", iDCiudad) :
                new ObjectParameter("IDCiudad", typeof(int));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Clientes_Actualizar", iDClienteParameter, nitClienteParameter, primerNombreParameter, segundoNombreParameter, primerApellidoParameter, segundoApellidoParameter, telefonoParameter, direccionParameter, iDCiudadParameter, correoParameter, fechaCreacionParameter, usuarioParameter);
        }
    
        public virtual ObjectResult<usp_Clientes_Consultar_Result> usp_Clientes_Consultar(Nullable<int> iDCliente)
        {
            var iDClienteParameter = iDCliente.HasValue ?
                new ObjectParameter("IDCliente", iDCliente) :
                new ObjectParameter("IDCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Clientes_Consultar_Result>("usp_Clientes_Consultar", iDClienteParameter);
        }
    
        public virtual int usp_Clientes_Eliminar(Nullable<int> iDCliente)
        {
            var iDClienteParameter = iDCliente.HasValue ?
                new ObjectParameter("IDCliente", iDCliente) :
                new ObjectParameter("IDCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Clientes_Eliminar", iDClienteParameter);
        }
    
        public virtual ObjectResult<usp_Clientes_Obtener_Result> usp_Clientes_Obtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Clientes_Obtener_Result>("usp_Clientes_Obtener");
        }
    }
}
